 @startuml
skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods
hide interface attributes

package Model {

    class MastermindGame {
        - currentAttempts : Integer
        - roundScore : Integer
        + <<create>> MastermindGame(nbColors : Integer)
        + verifyVictory(): Boolean
        + verifyLoose(): Boolean
        + getScore(): Integer
        + setScore(score : Integer)
        + submitPlayerCombination(guess : Combination)
        + getCurrentAttempt(): Integer
    }

    class Combination {
        - colors: Color[]
        + <<create>> Combination(colors: Color[])
        + <<create>> Combination()
        + generateSecreteCombination(nbColors : Integer): Combination
        + getColorAtPosition(position: Integer): Color
    }

    class Hint {
        + <<create>> Hint(success : HintSuccess[])
        + generateCombinationHint(secret: Combination, guess: Combination): Hint
        + verifyColors(): Integer
        + verifyPositions(): Integer
        + getCorrectPositions(): Integer
        + getCorrectColors(): Integer
    }

    enum Colors <<enum>> {
        BLUE,
        RED,
        GREEN,
        YELLOW,
        ORANGE,
        PURPLE,
        GREY
    }

    enum HintSuccess <<enum>> {
        RIGHTPOSITIONANDCOLOR,
        RIGHTCOLOR,
        FALSE
    }

    interface MasterMindObserver <<interface>> {
        + updateCombination(color : Color, index : Integer

    }


}

package View {

    class StartScreen extends JFrame {
        + StartScreen()
    }

    class EndScreen extends JFrame {
        + EndScreen()
    }

    class GameScreen extends JFrame implements Model.MasterMindObserver{
        + GameScreen()
    }

    class MastermindSwingView implements MastermindView {
        + showStartScreen()
        + showGameScreen()
        + showEndScreen(score: Integer, isWin: Boolean)
        + selectColorsForCombination(): Combination
        + validateCombination() : Combination
        + showHints(hint: Hint)
        + resetCombination()
    }

}

package Controller {

    class MastermindController {
        - model : MastermindGame
        - view : MastermindView
        - gameScore : Integer
        - nbColors :Integer
        - actualRound : Integer
        + <<create>> MastermindController(model : MastermindGame)
        + startGame()
        + endGame()
        + startRound(nbColors : Integer, nbTrys : Integer, nbHoleCombination :Integer) : Integer
        + endRound(lastTurnHint : Integer[])
        + addColorInCombination(color : Color, index : Integer)
        + submitTry() : Integer[]

    }

}

MastermindGame --> "1\n -secretCombination" Combination : uses
MastermindGame --> "1\n -playerAttempt" Combination : uses
MastermindController --> MastermindGame : controls
MastermindController --> MastermindView : displays
Combination --> "*\n -colors" Colors : consists of
Hint --> "*\n -hintSuccess" HintSuccess : determines >
MastermindGame ..> Hint : uses >
@enduml
