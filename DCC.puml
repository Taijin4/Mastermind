@startuml

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods
hide interface attributes

package Model {

    class MastermindGame {
        - roundScore : Integer
        + <<create>> MastermindGame(nbColors : Integer) : Integer
        + verifyVictory(secret: Combination, guess: Combination): Boolean
        + verifyLoose(nbTrys: Integer): Boolean
        + getScore(): Integer
        + setScore(): Integer
        + setGuess(guess : Combination)
    }

    class Combination {
        - colors: Color[]
        + <<create>> Combination(colors: Color[])
        + generateSecreteCombination(nbColors : Integer): Combination
        + getColorAtPosition(position: Integer): Color
    }

    class Hint {
        - correctPositions: Integer
        - correctColors: Integer
        + <<create>> Hint(correctPositions: Integer, correctColors: Integer)
        + generateCombinationHint(guess: Combination): Hint
        + verifyColors(secret : Combination, guess : Combination) : Integer
        + verifyPositions(secret : Combination, guess : Combination) : Integer
        + getCorrectPositions(): Integer
        + getCorrectColors(): Integer
    }

    enum Colors <<enum>>{
        BLUE
        RED
        GREEN
        YELLOW
        ORANGE
        PURPLE
        PINK
        GREY
    }

    interface MasterMindObserver <<interface>>{
        + updatePositions(Hint : hint)
        + updateColors(color : Integer)
    }

    enum HintSuccess <<enum>>{
        RightPositionAndColor
        RightColor
        False
    }

}


package View {

    interface MastermindView {
        + <<create>> MastermindView()
        + showStartScreen()
        + showGameScreen()
        + showEndScreen(score: Integer, isWin: Boolean)
        + selectColorsForCombination(): Combination
        + validateCombination() : Combination
        + showHints(indice: Hint)
        + resetCombination()
    }

    class MastermindSwingView extends MastermindView{
        + <<create>> MastermindSwingView()
        + showStartScreen()
        + showGameScreen()
        + showEndScreen(score: Integer, isWin: boolean)
        + selectColorsForCombination(): Combination
        + showHints(indice: Hint)
        + resetCombination()
    }

}

package Controller {

    class MastermindController {
        - gameScore : Integer
        + <<create>> MastermindController(game: MastermindGame, vue: MastermindView)
        + startGame(nbRounds : Integer)
        + startRound() : Integer
        + makeGuess(combinaison: Combinaison)
        + resetGame()
    }

}

MastermindGame ..> Hint : use
MastermindGame --> Combination : possède
MastermindController -->  Model : use
MastermindController --> MastermindView : possède
Combination " *   " o---> "*\n-color" Colors : Possède >

@enduml
