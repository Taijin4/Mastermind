@startuml

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods
hide interface attributes

class MastermindModel {
    + generateSecreteCombination(): Combination
    + generateCombinationHint(secret: Combination, guess: Combination): Hint
    + verifyVictory(secret: Combination, guess: Combination): boolean
    + verifyLoose(nbTrys: int): boolean
    + getScore(): int
}

class Combination {
    - colors: Color[]
    + Combination(colors: Color[])
    + getColorAtPosition(position: int): Color
}

enum Color <<enum>>{
    BLUE
    RED
    GREEN
    YELLOW
    ORANGE
    PURPLE
    PINK
    GREY
}

class Hint {
    - correctPositions: int
    - correctColors: int
    + Hint(correctPositions: int, correctColors: int)
    + getCorrectPositions(): int
    + getCorrectColors(): int
}

interface MastermindView {
    + showStartScreen(): void
    + showGameScreen(): void
    + showEndScreen(score: int, isWin: boolean): void
    + selectColorsForCombination(): Combination
    + showHints(indice: Indice): void
    + resetCombination(): void
}

class MastermindSwingView extends MastermindView{
    - startScreen: JFrame
    - gameScreen: JFrame
    - endScreen: JFrame
    + MastermindSwingView()
    + showStartScreen(): void
    + showGameScreen(): void
    + showEndScreen(score: int, isWin: boolean): void
    + selectColorsForCombination(): Combination
    + showHints(indice: Indice): void
    + resetCombination(): void
}

class MastermindController {
    - modele: MastermindModel
    - vue: MastermindView
    + MastermindController(modele: MastermindModel, vue: MastermindView)
    + startGame(): void
    + makeGuess(combinaison: Combinaison): void
    + resetGame(): void
}

MastermindModel ..> Combination
MastermindModel ..> Hint
MastermindModel --> MastermindView
MastermindView <|-- MastermindSwingView
MastermindController --> MastermindModel
MastermindController --> MastermindView
Combination o--> Color : utilise

@enduml
