 @startuml
skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods
hide interface attributes

package Model {

    class MastermindGame {
        - secretCombination : Combination
        - nbRounds : Integer
        - nbColor : Integer
        - nbTrys : Integer
        - nbHoleCombination : Integer
        - playerCombination : Combination
        - hintStrategy : ShowHintStrategy
        - score : Integer
        - actualTry : Integer
        - lastHint : Hint
        - observers : List<MasterMindObserver>

        + <<create>> MastermindGame(nbColor :Integer, nbRounds : Integer, nbHoleCombination : Integer, nbTrys : Integer)
        + setHintStrategy(hintStrategy : ShowHintStrategy)
        + getNbColor() : Integer
        + getNbTrys() : Integer
        + getNbRounds() : Integer
        + getNbHoleCombination() : Integer
        + addColorInCombination(color : Color, index : Integer)
        + getPlayerCombination() : Combination
        + setSecretCombination()
        + addToScore(roundScore : Integer)
        + getScore() : Integer
        + getActualTry() : Integer
        + resetActualTry()
        + submitTry()
        + addObserver(observer : MasterMindGameObserver)
        + getLastHint() : Hint
        + getHintStrategy() : ShowHintStrategy
        + resetLastHint()
    }

    class Combination {
        - colors: List<Color>
        + <<create>> Combination(nbColors : Integer)
        + <<create>> Combination(combination : Combination)
        + getColorAtPosition(position: Integer) : Color
        + setColorAtPostion(color : Color, position : Integer)
        + containsColor(color : Color) : Boolean
        + size() : Integer
        + removeAtPosition(i : Integer)
        + replaceAtPosition(i : Integer)
        + removeColor(color : Color)
        + printCombination()
        + generateSecreteCombination()
        + generateSecreteCombinationOneTimeColor()
        + isValid() : Boolean
        + verifyCombination(secret : Combination) : Hint
        + resetCombination()
    }

    class Hint {
        - hint : ArrayList<HintSuccess>
        - hintNumbers : ArrayList<Integer>
        - hintSuccessArray : Boolean
        + <<create>> Hint(correctPositions : Integer, correctColors : Integer)
        + <<create>> Hint(size : Integer)
        + getCorrectColorsAtCorrectPositions(): Integer
        + getCorrectColorsAtBadPositions(): Integer
        + setValueAtPosition(value : HintSuccess, i : Integer)
        + getValueAtPosition(i : Integer) : HintSuccess
        + getSize() : Integer
        + printHint()
        + isHintSUccessArray() : Boolean
    }

    enum Colors <<enum>> {
        BLUE,
        RED,
        GREEN,
        YELLOW,
        ORANGE,
        PURPLE,
        GREY
    }

    enum HintSuccess <<enum>> {
        RIGHTPOSITIONANDCOLOR,
        RIGHTCOLOR,
        FALSE
    }

    interface MasterMindObserver <<interface>> {
        + updateCombination(color : Color, index : Integer

    }


}

package View {

    class StartScreen extends JFrame {
        + <<create>> StartScreen()
    }

    class EndScreen extends JFrame {
        + <<create>> EndScreen()
    }

    class GameScreen extends JFrame implements Model.MasterMindObserver{
        + <<create>> GameScreen()
    }

    class MastermindSwingView implements MastermindView {
        + showStartScreen()
        + showGameScreen()
        + showEndScreen(score: Integer, isWin: Boolean)
        + selectColorsForCombination(): Combination
        + validateCombination() : Combination
        + showHints(hint: Hint)
        + resetCombination()
    }

}

package Controller {

    class MastermindController {
        - model : MastermindGame
        - view : MastermindView
        - gameScore : Integer
        - nbColors :Integer
        - actualRound : Integer
        + <<create>> MastermindController(model : MastermindGame)
        + startGame()
        + endGame()
        + startRound(nbColors : Integer, nbTrys : Integer, nbHoleCombination :Integer) : Integer
        + endRound(lastTurnHint : Integer[])
        + addColorInCombination(color : Color, index : Integer)
        + submitTry() : Integer[]

    }

}

MastermindGame --> "1\n -secretCombination" Combination : uses
MastermindGame --> "1\n -playerAttempt" Combination : uses
MastermindController --> MastermindGame : controls
MastermindController --> MastermindView : displays
Combination --> "*\n -colors" Colors : consists of
Hint --> "*\n -hintSuccess" HintSuccess : determines >
MastermindGame ..> Hint : uses >
@enduml
